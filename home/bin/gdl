#!/usr/bin/env python3

import argparse
import json
import logging
import logging.config
import os
import re
import subprocess
import sys
from collections.abc import Sequence
from typing import Optional

PROG = "gdl"

logger = logging.getLogger(PROG)


def configure_logging(verbose: int) -> None:
    """Configure logging."""
    log_levels = ["INFO", "DEBUG"]
    log_level = log_levels[min(len(log_levels) - 1, verbose)]
    logging.config.dictConfig(
        {
            "version": 1,
            "disable_existing_loggers": False,
            "formatters": {
                "standard": {
                    "format": f"[{PROG}|%(levelname)s]: %(message)s",
                },
                "verbose": {
                    "format": (
                        f"[{PROG}|%(levelname)s|%(module)s|L%(lineno)d]: %(message)s"
                    )
                },
            },
            "handlers": {
                "stderr": {
                    "class": "logging.StreamHandler",
                    "level": log_level,
                    "formatter": "verbose" if verbose else "standard",
                    "stream": "ext://sys.stderr",
                },
            },
            "root": {
                "level": "DEBUG",
                "handlers": ["stderr"],
            },
        }
    )


def get_wrapper() -> Optional[str]:
    if os.path.isfile("gradlew"):
        return "./gradlew"
    if os.path.isfile("gradlew.bat"):
        return "gradlew.bat"
    return None


def main(argv: Optional[Sequence[str]] = None) -> int:
    arg_parser = argparse.ArgumentParser()

    arg_parser.add_argument(
        *("-v", "--verbose"),
        help="Enable verbose logging",
        action="count",
        default=0,
    )
    arg_parser.add_argument(
        *("--remote-debug",),
        action="store_true",
        default=False,
        help="Run gradle in remote debugging mode for plugins.",
    )
    arg_parser.add_argument(
        *("--dry",),
        action="store_true",
        default=False,
        help="Show gradle command instead of running it.",
    )
    arg_parser.add_argument(
        *("-l", "--log-level"),
        choices=["quiet", "warn", "lifecycle", "info", "debug"],
        default="lifecycle",
        help="Run gradle in remote debugging mode for plugins.",
    )

    args, gradle_rest = arg_parser.parse_known_args(argv)
    logger.info("args: %s", vars(args))
    configure_logging(args.verbose)

    gradle_args = ["--console=plain"]

    if args.log_level != "lifecycle":
        gradle_args.append(f"--{args.log_level}")

    if args.remote_debug:
        gradle_args.extend(["--no-daemon", "-Dorg.gradle.debug=true"])

    gradle_args.extend(gradle_rest)

    wrapper = get_wrapper()
    if wrapper is None:
        logger.error("gradle wrapper not found")
        return 1

    command = [wrapper, *gradle_args]

    if args.dry:
        command_args = " ".join(command)
        print(command_args)
    else:
        conf = {}
        rc_file = os.path.join(os.getcwd(), ".gdlrc.json")
        if os.path.isfile(rc_file):
            logger.info("rc file %s found.", rc_file)
            with open(rc_file, "r") as f:
                conf = json.load(f)

        logger.info("command: %s", " ".join(command))
        # subprocess.run(args=command)

    try:
        # Start the subprocess
        proc = subprocess.Popen(
            ["your_command", "arg1", "arg2"],  # Replace with your command
            preexec_fn=os.setsid  # Ensure the subprocess has its own process group
        )

        # Wait for the subprocess to complete
        proc.wait()
    except KeyboardInterrupt:
        # Catch the SIGINT and forward it to the subprocess
        print("Caught Ctrl+C, forwarding SIGINT to subprocess...")
        os.killpg(os.getpgid(proc.pid), signal.SIGINT)  # Send SIGINT to the subprocess group
        proc.wait()  # Wait for the subprocess to terminate
        sys.exit(1)  # Exit with an error code or propagate as needed
    except Exception as e:
        print(f"An error occurred: {e}")
        sys.exit(1)
    finally:
        # Cleanup if the subprocess is still running
        if proc.poll() is None:
            proc.terminate()
            proc.wait()

        process = subprocess.Popen(
            args=command,
            # Ensure the subprocess has its own process group so that we can kill the whole process tree
            preexec_fn=os.setsid,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        RED = "\033[91m"
        GREEN = "\033[92m"
        BLUE = "\033[94m"
        CYAN = "\033[93m"
        RESET = "\033[0m"

        last_line_blank = False

        for raw_line in process.stdout:  # type: ignore
            line = raw_line.decode()[:-1]
            if line.strip() == "":
                if last_line_blank:
                    continue
                last_line_blank = True
                sys.stdout.write("\n")
                sys.stdout.flush()
                continue

            line_ignored = False
            for pattern in conf.get("ignored", []):
                if re.match(pattern, line) is not None:
                    logger.debug(
                        "Line '%s' matches ignored pattern '%s'", line, pattern
                    )
                    line_ignored = True
                    continue
            if line_ignored:
                continue

            line_color = None
            for color in ["red", "blue", "green", "cyan"]:
                for pattern in conf.get(color, []):
                    if re.match(pattern, line) is not None:
                        logger.debug(
                            "Line '%s' matches highlighted pattern '%s'", line, pattern
                        )
                        line_color = color
                        continue
                if line_color is not None:
                    break

            last_line_blank = False

            if not sys.stdout.isatty():
                sys.stdout.write(line)
            elif line_color == "blue":
                sys.stdout.write(f"{BLUE}{line}{RESET}")
            elif line_color == "red":
                sys.stdout.write(f"{RED}{line}{RESET}")
            elif line_color == "cyan":
                sys.stdout.write(f"{CYAN}{line}{RESET}")
            elif line_color == "green":
                sys.stdout.write(f"{GREEN}{line}{RESET}")
            else:
                sys.stdout.write(line)

            sys.stdout.write("\n")
            sys.stdout.flush()

        process.stdout.close()  # type: ignore

        for raw_line in process.stderr:  # type: ignore
            line = raw_line.decode()[:-1]
            if line.strip() == "":
                if last_line_blank:
                    continue
                last_line_blank = True
                sys.stderr.write("\n")
                sys.stderr.flush()
                continue

            line_ignored = False
            for pattern in conf.get("ignored", []):
                if re.match(pattern, line) is not None:
                    logger.debug(
                        "Line '%s' matches ignored pattern '%s'", line, pattern
                    )
                    line_ignored = True
                    continue
            if line_ignored:
                continue

            line_color = None
            for color in ["red", "blue", "green", "cyan"]:
                for pattern in conf.get(color, []):
                    if re.match(pattern, line) is not None:
                        logger.debug(
                            "Line '%s' matches highlighted pattern '%s'", line, pattern
                        )
                        line_color = color
                        continue
                if line_color is not None:
                    break

            last_line_blank = False

            if not sys.stderr.isatty():
                sys.stderr.write(line)
            elif line_color == "blue":
                sys.stderr.write(f"{BLUE}{line}{RESET}")
            elif line_color == "red":
                sys.stderr.write(f"{RED}{line}{RESET}")
            elif line_color == "cyan":
                sys.stderr.write(f"{CYAN}{line}{RESET}")
            elif line_color == "green":
                sys.stderr.write(f"{GREEN}{line}{RESET}")
            else:
                sys.stderr.write(line)

            sys.stderr.write("\n")
            sys.stderr.flush()

        process.wait()

    return 0


if __name__ == "__main__":
    raise SystemExit(main())
